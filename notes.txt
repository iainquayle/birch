figure out scoping symbol useage 
may change it such that modules can be compiled at run time, in which case the syntax for a mod would change to
	mod \_ = ...
perhaps files wont be treated as modules, thus importing the explicit module will be required 
consider making the top level mod in a file, if the only one, not require any scoping, maybe signify it as such some how 
modules and funcions are pre annotated


the idea for generic function prototypes will be the means to traits, how to make collections of them though? unless just dont 

change so that environment capture is allowed

mod 
	data Self = 
		x: i32 

mod 
	data Self = 
			x: i32 
			h: i32
		| SomeType 
			y: i32
			z: i32
		| OtherType 
			y: i32
			z: i32


	func f(self)

	...
		type =, 1, 1 -> f -> ...


members, modules, and functions can be access restricted to the module they are defined in, perhaps as well selectively to other modules


so an example of a module, take the shape types used in lemnos

mod Shape
	pub type Shape =
			shape: [u32, 3] //assuming it is max 3d
			vis dims: u32
		| Locked
		| Open

	pub fn common_lossless ... -> Shape?:
		...

pub type Option T = 
	| Some
		value: T
	| None



pub type Option T B ...something Trait = 

